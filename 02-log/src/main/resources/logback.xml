<?xml version="1.0" encoding="UTF-8"?>
<!--
三个没啥用的属性 可以不看
<configuration scan="true" scanPeriod="3 seconds" debug="false">
1.scan 当此配置文件进行改变的时候,是否程序会自动加载 默认值为true。
2.scanPeriod  scan为true时,定时检测配置文件是否修改的时间周期
              默认单位是毫秒,默认的时间间隔为1分钟。
3.debug 设置为true时，将打印出logback内部日志信息.主要来看logback的运行状态
 -->
<configuration>
    <!--xml的全局变量-->
    <property name="LOG_HOME" value="/export/Logs/log"/>
    <property name="encoding" value="UTF-8"/>
    <!--负责写日志的组件，name指定appender名称，class指定appender的全限定名-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--格式化输出：%d表示日期
                         %thread表示线程名
                         %-5level：级别从左显示5个字符宽度
                         %logger输出的是日志名称
                         %msg：日志消息
                         %caller{3} 调用栈输出 这个方法特别有用 对于一些出错的地方特别好使 这里代表三层
                         %L 输出行号
                         %M 记录调用日志的方法
                         %n是换行符
                         %X{MDC的key} 输出MDC的变量
                         -->
            <pattern>%X{userId} 日期: %d{yyyy-MM-dd HH:mm:ss.SSS} 线程-%thread %L %M  %-5level  %logger{50} - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--    归档为文件-->
    <appender name="LogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/test.log</file>
        <!--设置归档策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档日志文件名-->
            <fileNamePattern>${LOG_HOME}/error.log.%d{yyyy-MM-dd}</fileNamePattern>
            <!-- 最多保存15天历史文件 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%p %d{yyyy-MM-dd HH:mm:ss} %logger - %m%n</pattern>
        </encoder>
        <!--最大日志的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>1MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <appender name="myLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/myLog.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.log.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%p %d{yyyy-MM-dd HH:mm:ss} %logger - %m%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.log.%d{yyyy-MM-dd}</fileNamePattern>
            <maxHistory>15</maxHistory>
        </rollingPolicy>

        <!-- 设置打印的级别-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--    这个还有顺序的啊 放在后面-->
    <root level="INFO">
        <appender-ref ref="console" />
        <appender-ref ref="LogFile" />
        <appender-ref ref="myLog" />
    </root>

    <!-- 如果需要对某个包专门进行打印,要求在此处进行变更-->
    <!-- 将这个包下的所有日志按照error的方案打印出来-->
    <!--additivity=ture表示 root也会将这个包的日志打印出来.
                   false则意味着这个包的日志被排除了.
                   当某个包日志打印过于频繁 需要从整体中单独拎出来 可以选择false
                   当某个包日志不怎么打印 我们只需要对这个包下的日志进行特别关注,就得选择true
                   -->
    <logger name="com.cp" level="warn" additivity="true">
        <!-- 多种方式打印-->
        <appender-ref ref="myLog"/>
    </logger>

</configuration>