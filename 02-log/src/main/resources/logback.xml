<?xml version="1.0" encoding="UTF-8"?>
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<configuration scan="true" scanPeriod="3 seconds" debug="false">
    <!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
    <!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
    <!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

    <property name="LOG_HOME" value="/export/Logs/log"/>
    <property name="encoding" value="UTF-8"/>
    <!-- 子节点<property> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。-->

    <!--子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 设置日志输出格式 -->
            <!-- 其中-->
            <!--格式化输出：%d表示日期
                         %thread表示线程名
                         %-5level：级别从左显示5个字符宽度
                         %logger输出的是日志名称
                         %msg：日志消息
                         %caller{3} 调用栈输出 这个方法特别有用 对于一些出错的地方特别好使 这里代表三层
                         %L 输出行号
                         %M 记录调用日志的方法
                         %n是换行符
                         %X{MDC的key} 输出MDC的变量
                         -->
            <pattern>%X{userId} 日期: %d{yyyy-MM-dd HH:mm:ss.SSS} 线程-%thread %L %M  %-5level  %logger{50} - %msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!--    归档为文件-->
    <appender name="LogFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <file>${LOG_HOME}/test.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档日志文件名-->
            <fileNamePattern>${LOG_HOME}/error.log.%d{yyyy-MM-dd}</fileNamePattern>
            <!-- 最多保存15天历史文件 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%p %d{yyyy-MM-dd HH:mm:ss} %logger - %m%n</pattern>
        </encoder>
        <!--最大日志的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>1MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。：-->
    <appender name="myLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_HOME}/myLog.log</file>
        <!--<rollingPolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类-->
        <!--最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--<fileNamePattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。-->
            <fileNamePattern>${LOG_HOME}/error.log.log.%d{yyyy-MM-dd}</fileNamePattern>
        </rollingPolicy>
        <encoder>
            <pattern>%p %d{yyyy-MM-dd HH:mm:ss} %logger - %m%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--归档日志文件名-->
            <fileNamePattern>${LOG_HOME}/error.log.%d{yyyy-MM-dd}</fileNamePattern>
            <!-- 最多保存15天历史文件 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>

        <!-- 设置打印的级别-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--    这个还有顺序的啊 放在后面-->
    <root level="INFO">
        <appender-ref ref="console" />
        <appender-ref ref="LogFile" />
        <appender-ref ref="myLog" />
    </root>

    <!--    用来设定某个包的打印级别-->
    <!--    将这个包下的所有日志按照error的方案打印出来-->
    <!--additivity表示这个日志是否会打印出了我们安排的appender以外的根,如果true表示的是,root也会将这个包的日志打印出来.
    否则为false则意味着这个包的日志被排除了.用true把 这样我们就可以单独将我么需要的日志拉取出来-->
    <logger name="com.compare" level="error" additivity="true">
        <!-- 多种方式打印-->
        <appender-ref ref="myLog"/>
    </logger>

</configuration>